// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel standard 
#pragma kernel turbulence 
#pragma kernel ridge 


//梯度值
float2 grad[8];
//随机值
//一定要用static 不然值不会初始化的！！！！！
static const int permutation[256] = { 160,151,137,91,90,15,
   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
}; 
//生成梯度值
void GenerateGradients()
{
   for (int i = 0; i < 8; ++i)
      {
        grad[i]=float2(
        (float)cos(0.785398163f * (float)i),
        (float)sin(0.785398163f * (float)i));
      }
 }
#define F 0.366025404 
#define G 0.211324865
RWStructuredBuffer<float> Result;
float TextureSize;
float NoiseScale;


int _Octaves;
float _Lacunarity;
float _Gain;
float _Amplitude;
float _Frequency;

float mix(float a, float b, float t) {
    return b*t + a*(1 - t);
}

float simplexNoise(float2 p) {
    float2 SkewPos = p + (p.x + p.y) * F;
    int2 Skewi = floor(SkewPos);
    float2 Skewf = frac(SkewPos);

    int2 p1 = (Skewf.x < Skewf.y) ? int2(0, 1) : int2(1, 0);

    float2 d1 = p - (Skewi - (Skewi.x + Skewi.y) * G);
    float2 d2 = d1 - p1 + G;
    float2 d3 = d1 - 1 + 2 * G;

    float3 h = max(0.5 - float3(dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);
    
    int g1=permutation[(Skewi.x+permutation[Skewi.y&255])&255]&7;
    int g2=permutation[(Skewi.x+p1.x+permutation[Skewi.y+p1.y&255])&255]&7;
    int g3=permutation[(Skewi.x+1+permutation[Skewi.y+1&255])&255]&7;
    float3 n = h * h * h * h * float3(dot(d1, grad[g1]), dot(d2, grad[g2]), dot(d3, grad[g3]));

    return dot(float3(70, 70, 70), n);
}

float fbm(float2 uv) {
    /*如果要多次使用，要把_Frequency和_Amplitude赋值给新的，不能直接用，因为这两个是全局的*/
    float v;
    for (int i = 0; i < _Octaves; i++) {
        v += _Amplitude*(simplexNoise(_Frequency*uv)+1)*0.5;
        _Frequency *= _Lacunarity;
        _Amplitude *= _Gain;
    }
    return v;
}
float fbmTurbulence(float2 uv) {
    float v;
    for (int i = 0; i < _Octaves; i++) {
        v += _Amplitude*abs(simplexNoise(_Frequency*uv));
        _Frequency *= _Lacunarity;
        _Amplitude *= _Gain;
    }
    return v;
}
float fbmRidge(float2 uv) {
    float v;
    float pre=1;
    for (int i = 0; i < _Octaves; i++) {
        float h = abs(simplexNoise(_Frequency*uv));
        h = 0.9 - h;
        h = h * h; 
        v +=h*_Amplitude;
        v +=h*pre*_Amplitude;
        pre=h;
        _Frequency *= _Lacunarity;
        _Amplitude *= _Gain;
    }
    return v;
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    GenerateGradients();
    int index=id.x+TextureSize*id.y;
    float2 uv=(id.xy/TextureSize)*NoiseScale;
    float noise=(simplexNoise(uv)+1)*0.5;
    Result[index]=noise;
}

[numthreads(8,8,1)]
void standard (uint3 id : SV_DispatchThreadID)
{
    GenerateGradients();
    int index=id.x+TextureSize*id.y;
    float2 uv=(id.xy/TextureSize)*NoiseScale;
    Result[index] = fbm(uv);
}

[numthreads(8,8,1)]
void turbulence (uint3 id : SV_DispatchThreadID)
{
    GenerateGradients();
    int index=id.x+TextureSize*id.y;
    float2 uv=(id.xy/TextureSize)*NoiseScale;
    Result[index] = fbmTurbulence(uv);
}

[numthreads(8,8,1)]
void ridge (uint3 id : SV_DispatchThreadID)
{
    GenerateGradients();
    int index=id.x+TextureSize*id.y;
    float2 uv=(id.xy/TextureSize)*NoiseScale;
    Result[index] = fbmRidge(uv);
}
